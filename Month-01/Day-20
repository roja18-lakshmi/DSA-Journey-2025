//using sorting - O(nlog(n)) but 18ms
class Solution {
    public int longestConsecutive(int[] nums) {
        int n=nums.length;
        if(n<1){
            return 0;
        }
        Arrays.sort(nums);
        int c=1;
        int max=1;
        for(int i=0;i<n-1;i++){
            if(nums[i]==(nums[i+1]-1)){
                c+=1;
                max=Math.max(c,max);
            }
            else if(nums[i]!=nums[i+1]){
                c=1;
            }
        }
        return max;
    }
}

//using hashset-O(n) but 30ms
class Solution {
    public int longestConsecutive(int[] nums) {
        HashSet<Integer> h=new HashSet<>();
        for(int i:nums){
            h.add(i);
        }
        int max=0;
        for(int i:h){
            if(!h.contains(i-1)){
                int c=1;
                int temp=i;
                while(h.contains(temp+1)){
                    temp=temp+1;
                    c+=1;
                }
                max=Math.max(max,c);
            }
        }
        return max;
    }
}