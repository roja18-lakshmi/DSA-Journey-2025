//brute force inO(n^2)
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int res []=new int [2];
        int n=nums.length;
        for(int i=0;i<n-1;i++){
            for(int j=i+1;j<n;j++){
                if(nums[i]+nums[j]==target){
                    res[0]=i;
                    res[1]=j;
                    return res;
                }
            }
        }
        return res;
    }
}
//using hashmap in O(n)
class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer,Integer> m=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            int t=target-nums[i];
            if(m.containsKey(t)){
                return new int[]{m.get(t),i};
            }
            m.put(nums[i],i);
        }
        return new int[]{-1,-1};
    }
}
